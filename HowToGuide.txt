Introduction and context

During the second term of this MSc programme, I joined a Work Placement module run by the University in partnership with OSNI.  The project to which I was invited to participate involved identifying areas of mixed land cover on orthophotography 4-band raster data (RGB + near infrared), with a spatial resolution of 40 cm.
A significant amount of work had been covered by the OSNI team.  There was, however, an area which had been left unexplored: using and Deep Learning to solve this problem.  In particular, I became interested in applying deep learning in sparse sampling scenarios, as some of the literature has shown (). 
Deep learning is a type of machine learning with several layers of nonlinear processing which allow users to identify patterns, objects, and pixels through models.  It is a significant improvement on previous Machine Learning systems since it does not require vast amounts of training samples produced by expert users.
The Work Placement and the project were completed very successfully: I managed to carry out pixel classification of orthophotography data provided by OSNI to identify land cover using sparse sampling (the time I took to collect training samples was never more than 30').  The outcome of the classification was assessed and found to outperform previous approaches.
Although the project was a success, I realised there was room for improvement.  I had carried out the analysis using ArcGis Pro user interface.  However, I believed that using ArcGis Pro's python environment, libraries and dependencies would allow me to deepen my analysis, customise it and provide additional features.  
Summarising, this project is the result of applying what I have learned in EGM722 (Programming for GIS and Remote Sensing) to a topic I was introduced while doing EGM725, and consists of providing a tool to automatise land cover image classification by pre-processing target data, exporting training samples, training and evaluating deep learning models, and displaying results â€“ all without requiring any knowledge from the user. 
Setup/Installation

Public GIT repository: https://github.com/JSG-GIS-722/Project.git
Test data which is affected by specific copyright arrangements can be found in:
The best way to use this Classifier tool is to open the notebook EGM722Classifier.ipynb from a new ArcGis Pro project.  Some of the deep learning dependencies used here require the ArcGIS Image Analyst extension, ArcGIS Spatial Analyst extension or the ArcGIS 3D Analyst extension, so a licensed copy of ArcGis Pro needs to be open while running the notebook.  This repository includes the required .yml file (created using conda env export > environment.yml) to duplicate the python environment, but the before mentioned licensing constrains still apply.
This project was carried out using ArcGis Pro v2.9 with ESRI's Deep Learning libraries 2.9 and a functioning dedicated python environment.
Hardware-accelerated GPU scheduling is recommended to reduce latency and improve performance when executing processor-intensive Deep Learning algorithms.
The project uses training data obtained from OSNI's own 4-band orthoimagery (spatial resolution of 40cm, and a red, green, blue and NIR band).  This training data has been exported using ArcGIS Pro for the models being analysed.  The feature class file is called trainingsamples.shp.
To help organising the project, I mapped a new U: drive, where I created a Project folder for public GIT files, and a ProjectData folder for OSNI copyright files and script output files to improve readability and understanding of the project.  The user should replicate this structure or adapt the script accordingly.
Finally, the script creates a significant number of files and folders, and therefore it is necessary to ensure that the machine which is running  it has enough memory resources (a minimum of 5 GB memory is recommended).  
Finally, I realised that using the python environment through a notebook had many advantages, but it run a lot slower than through ArcGIS Pro user interface menus.  I believe that's the result of ArcGis Pro using parallelism (splitting tasks among different hardware cores to speed up processing).  I therefore also employed parallelism through the multiprocessing python library, successfully running the process 16 times quicker (the number of my cores) than before.

Methods

Pre-Processing

The Classifier starts by pre-processing the raster file being analysed to optimize it before applying any deep learning algorithms.  The first stage of the pre-processing process consists of smoothing the target image using a sharpening 5 x 5 filter.  Secondly, the image is stretched using a Sigmoid function (this highlights moderate pixel values while maintaining sufficient contrast in the perimeter).   Then, the resulting raster is resampled and segmented.  Segmentation is a key process as it changes the characteristics of the image to facilitate classification.  The parameters used for this process followed those used by my supervising team at OSNI, and featured relatively high spectral detail (18 out of 20), low spatial detail (3) and a minimum segment size of 25 pixels. 
The final pre-processing step is to verify that the raster being analysed is a 3 band, 8 bit unsigned file.  Deep Learning models run in the ArcGis Pro environment can not have more than 3 bands, so the 4th band (near infrared) is removed and the raster is saved as a 8 bit unsigned image.
Export Training Data

Training data was gathered through ArcGis Pro and exported specifying that classified tiles is the meta data format required.  This will allow our script to generate a 

